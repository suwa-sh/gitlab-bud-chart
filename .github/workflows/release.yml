name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
          
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Build and push backend image
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=raw,value=latest
            
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version_number }}
            
      # Build and push frontend image
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=raw,value=latest
            
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version_number }}
            
      # Create docker-compose.release.yml
      - name: Create release docker-compose
        run: |
          cat > docker-compose.release.yml << EOF
          version: "3.8"
          
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.version.outputs.version }}
              container_name: gitlab-bud-chart-backend
              ports:
                - "8000:8000"
              environment:
                - PYTHONPATH=/app
                - GITLAB_URL=\${GITLAB_URL:-http://localhost:8080}
                - GITLAB_TOKEN=\${GITLAB_TOKEN}
                - GITLAB_PROJECT_ID=\${GITLAB_PROJECT_ID:-1}
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.version.outputs.version }}
              container_name: gitlab-bud-chart-frontend
              ports:
                - "3000:3000"
              depends_on:
                - backend
              environment:
                - VITE_API_URL=\${VITE_API_URL:-http://localhost:8000}
                - VITE_GITLAB_URL=\${VITE_GITLAB_URL:-http://localhost:8080}
                - VITE_GITLAB_TOKEN=\${VITE_GITLAB_TOKEN}
                - VITE_GITLAB_PROJECT_ID=\${VITE_GITLAB_PROJECT_ID:-1}
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOF
          
      # Generate changelog
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, including all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Generating changelog from $PREV_TAG to ${{ steps.version.outputs.version }}"
            COMMITS=$(git log $PREV_TAG..${{ steps.version.outputs.version }} --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Create changelog
          {
            echo "CHANGELOG<<EOF"
            echo "## What's Changed"
            echo ""
            echo "$COMMITS"
            echo ""
            echo "## Docker Images"
            echo ""
            echo "Backend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.version.outputs.version }}\`"
            echo "Frontend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.version.outputs.version }}\`"
            echo ""
            echo "## Quick Start"
            echo ""
            echo "\`\`\`bash"
            echo "# Download the release docker-compose file"
            echo "wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/docker-compose.release.yml"
            echo ""
            echo "# Create .env file with your GitLab configuration"
            echo "cat > .env << EOL"
            echo "GITLAB_URL=http://your-gitlab-instance.com"
            echo "GITLAB_TOKEN=your-gitlab-token"
            echo "GITLAB_PROJECT_ID=your-project-id"
            echo "EOL"
            echo ""
            echo "# Start the application"
            echo "docker-compose -f docker-compose.release.yml up -d"
            echo "\`\`\`"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
      # Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            docker-compose.release.yml
            
      # Update README with new version badge
      - name: Update README badges
        run: |
          # This is optional - update README.md with latest version badge
          if [ -f README.md ]; then
            sed -i "s|ghcr.io/badge/latest|ghcr.io/badge/${{ steps.version.outputs.version }}|g" README.md || true
          fi